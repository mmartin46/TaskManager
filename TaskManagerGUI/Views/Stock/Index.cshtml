@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@


@inject TaskManagerGUI.Repositories.IStockRepository _stockRepository;
@{
    var companyName = ViewData["StockName"] as string;
    var stockData = await _stockRepository.ProcessStockApi(companyName);
}

<div id="stockCharts" class="container text-center align-content-center">

    @{
        string[] stats = { "Highs", "Lows", "Open", "Close"}; 
    }
    <h1 class="display-4">@companyName Stock Statistics</h1>
    <div class="row">
        @for (int i = 0; i < stats.Length; ++i)
        {

            var idName = $"stockChart{i}";

            <div class="col nextFrame">
                <h2>Stock @stats[i]</h2>
                <canvas class="dataChart" id=@idName style="max-width: 100%; height: auto;"></canvas>
            </div>
        }
    </div>
    <div class="row">
        @{
            CompanyModel companyRecord = await _stockRepository.GetEarnings(companyName);
            if (companyRecord != null)
            {
                /* Display information regarding the company. */
            }
        }
    </div>

</div>


@{
    var xDates = new List<string>(stockData.Keys);
    var values = new List<StockModel>(stockData.Values);
}
<script>

    function reverseArrays(allValues, xDates) {
        const keys = Object.keys(allValues);

        xDates = xDates.reverse();
        keys.forEach(key => {
            allValues[key] = allValues[key].reverse();
        });
    }

    let xDates = @Html.Raw(Json.Serialize(xDates));
    const values = @Html.Raw(Json.Serialize(values));
    let highs = [];
    let allValues = {
        highs: [],
        lows: [],
        open: [],
        close: [],
    };
   

    
    for (let i = 0; i < xDates.length; ++i) { 
        let { high, low, open, close } = values[i];

        allValues.highs.push(high);
        allValues.lows.push(low);
        allValues.open.push(open);
        allValues.close.push(close);
    }
    reverseArrays(allValues, xDates);

    const defaultScaleOptions = {
        scales: {
            y: {
                beginAtZero: true,
                ticks: {
                    color: 'white',
                },
                title: {
                    color: 'white'
                }

            },
            x: {
                ticks: {
                    color: 'white',
                },
                title: {
                    color: 'white'
                }
            }

        },
        layout: {
            padding: {
                left: 20,
                right: 20,
                top: 20,
                bottom: 20
            }
        },
        legend: {
            display: false,
            labels: {
                fontColor: 'white'
            }
        },
        plugins: {
        }
    };

    const data = {
        highs: {
            data: allValues.highs,
            backgroundColor: '#FF0034',
            borderColor: '#FF0034',
            fill: 'start',
            pointRadius: 0,
            options: defaultScaleOptions
        },
        lows: {
            data: allValues.lows,
            backgroundColor: '#FF0034',
            borderColor: '#FF0034',
            fill: 'start',
            pointRadius: 0,
            options: defaultScaleOptions
        },
        open: {
            data: allValues.open,
            backgroundColor: '#FF0034',
            borderColor: '#FF0034',
            fill: 'start',
            pointRadius: 0,
            options: defaultScaleOptions
        },
        close: {
            data: allValues.close,
            backgroundColor: '#FF0034',
            borderColor: '#FF0034',
            fill: 'start',
            pointRadius: 0,
            options: defaultScaleOptions
        }
    };

    const allSections = Object.values(data);

    for (let i = 0; i < allSections.length; ++i) {
        const stockData = {
            labels: xDates,
            datasets: [allSections[i]]
        };

        console.log(allSections[i]);

        const stockChart = new Chart(`stockChart${i}`, {
            type: 'line',
            data: stockData,

        });
    }


</script>