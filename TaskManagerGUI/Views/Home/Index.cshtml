@{
    ViewData["Title"] = "Home Page";
    var processList = ViewData["ProcessList"] as List<ProcessModel>;
    var memoryList = ViewData["MemoryList"] as List<MemoryModel>;

    @using Newtonsoft.Json;
}




@{
    (string, int) CompareToAverageCPU(List<ProcessModel> processList, double currentCPU)
    {
        double total = 0.0;
        int count = processList.Count();
        double average = 0.0;
        foreach(ProcessModel process in processList)
        {
            total += process.CPU;
        }
        average = total / count;

        double percentDifference = 100 * (average - currentCPU) / Math.Abs(currentCPU);
        int roundedPercent = (Int32) percentDifference * -1;


        if (roundedPercent < 0)
        {
            return (roundedPercent.ToString() + "% ⬇️", roundedPercent);
        }
        else
        {
            return (roundedPercent.ToString() + "% ⬆️", roundedPercent);
        }
    }
}


<script>

    function fadeInChart(id) {
        $(document).ready(function () {
            $(id).css("opacity", 0);
            $(id).css("position", "relative");

            $(id).animate({
                top: '+=70px'
            }, 0);

            $(id).animate({
                opacity: 1,
                top: '-=70px'
            }, 1000);
        });
    }

    fadeInChart("#mainCharts");
</script>


<div id="mainCharts" class="">
    <div class="text-center">
        <h1 class="display-4">Task Manager</h1>

        <div id="dataBlock" class="row align-content-center">
            <div class="col">
                <div class="container">
                    <div class="row">
                        <div class="col nextFrame">
                            <head-label message="Running Processes"></head-label>
                            <canvas class="dataChart" id="runningProcessChart" style="max-width:100%; height: auto;"></canvas>
                        </div>
                        <div class="col nextFrame">
                            <head-label message="Memory Status"></head-label>
                            <canvas class="dataChart" id="memoryCheckChart" style="max-width:100%; height: auto;"></canvas>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col nextFrame">
                            <head-label message="CPU(s) Usage"></head-label>
                            <canvas class="dataChart" id="processBarChart" style="max-width:100%; height: auto;"></canvas>
                        </div>
                        <div class="col nextFrame">
                            <head-label message="Expensive Programs"></head-label>
                            <p>These are the processes</p>
                            <br/>
                            @{
                                List<ProcessModel> cpuExpensivePrograms = processList.OrderByDescending(x => x.CPU).Where(x => CompareToAverageCPU(processList, x.CPU).Item2 > 0).ToList();
                            }

                            <div class="row align-content-center" id="shutdownProcesses" style="overflow-y: scroll; height: 200px;">
                                @{

                                    for (int i = 0; i < cpuExpensivePrograms.Count(); ++i)
                                    {

                                        var process = cpuExpensivePrograms[i];

                                                                        <div class="col align-content-center">
                                                                            <div class="miniFrame align-content-center text-start">

                                                                                        <div class="row buttonRow">
                                                                                            <div class="col">
                                                                                                @{
                                                            var processName = process.ProcessName.Count() <= 10 ? @process.ProcessName : @process.ProcessName.Substring(0, 10) + "..";
                                                                                                }
                                                                                                <h3 style="font-weight: 300">@processName</h3>
                                                                                                <h2 class="display-5">@Convert.ToInt32(process.CPU).ToString()<span style="font-size: 15px;"> CPU(s)</span></h2>

                                                                                                <div id="perc-title">
                                                                                                    <span id="percent">@CompareToAverageCPU(processList, process.CPU).Item1 </span><h6> CPU-Intensive Task</h6>
                                                                                                </div>
                                                                                            </div>

                                                                                            
                                                                                            
                                                                                            <script>
                                                                                                document.addEventListener("DOMContentLoaded", function () {
                                                                                                    var shutdownProcesses = document.querySelector('#shutdownProcesses');
                                                                                                    shutdownProcesses.scrollTop = 0;
                                                                                                });
                                                                                                
                                                                                                function endProcess(processName) {
                                                                                                    console.log(`Test: ${processName}`);

                                                                                                    fetch('/Home/EndProcess', {
                                                                                                        method: "POST",
                                                                                                        body: JSON.stringify({
                                                                                                            processToEnd: processName
                                                                                                        }),
                                                                                                        headers: {
                                                                                                            "Content-type": "application/json; charset=UTF-8"
                                                                                                        }
                                                                                                    })
                                                                                                    .then(response => response.json())
                                                                                                    .then(json => console.log(json));
                                                                                                }

                                                                                            </script>

                                                                                            <div class="col align-content-center text-center">
                                                                                                <input onclick="endProcess('@process.ProcessName')" class="end-btn" type="button" value="End Process" />
                                                                                            </div>



                                                                                        </div>

                                                                                    </div>
                                                                                </div>
                                    }
                                }
                            </div>

                            <script>
                                document.addEventListener('DOMContentLoaded', function () {
                                    var element = document.getElementById("shutdownProcesses");
                                    element.scrollTop = 0;
                                });
                            </script>

                  
                            
                        </div>


                    </div>
                </div>

            </div>
        </div>

    </div>
</div>


<script>


    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/memoryStatsHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function startConnection() {
        try {
            await connection.start();
            console.log("SignalR Connected");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    function formatTimeStamp(timestamp) {
        const date = new Date(timestamp);
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        const seconds = date.getSeconds().toString().padStart(2, '0');
        
        return `${hours}:${minutes}:${seconds}`;
    }


    connection.on("UpdateMemoryStats", (memoryStats) => {

        const TRANSPARENT_COLOR = 'rgba(0, 0, 0, 0.0)';
        console.log("Memory Stats Updated: ", memoryStats);


        const xDates = [];
        const yCounterSamples = [];

        for (const stat of memoryStats) {
            xDates.push(formatTimeStamp(stat['timeStamp']));
            yCounterSamples.push(Number(stat['megaBytes']));
        }

        const chartData = {
            labels: xDates,
            datasets: [{
                data: yCounterSamples,
                label: "Memory Usage (MB)",
                backgroundColor: (ctx) => {
                    const canvas = ctx.chart.ctx;
                    const gradient = canvas.createLinearGradient(50, 0, 0, 200);

                    gradient.addColorStop(0, '#b3d9ff');
                    gradient.addColorStop(1, TRANSPARENT_COLOR);

                    return gradient;
                },
                borderColor: '#99ccff',
                fill: 'start',
                pointRadius: 0
            }]
        };


        const memoryChart = new Chart("memoryCheckChart", {
            type: 'line',
            data: chartData,
            scaleFontColor: '#FFFFFF',
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: Chart.defaults.backgroundColor,
                        },
                        title: {
                            display: true,
                            color: 'white'
                        }

                    },
                    x: {
                        ticks: {
                            color: 'white',
                        },
                        title: {
                            display: true,
                            color: 'white'
                        }
                    }
                    
                },
                layout: {
                    padding: {
                        left: 20,
                        right: 20,
                        top: 20,
                        bottom: 20
                    }
                },
                legend: {
                    labels: {
                        fontColor: 'white'
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: 'white'
                        }
                    }
                }
            }
        });
    });

    connection.onclose(async () => {
        await startConnection();
    });

    startConnection();



</script>


<script>
    const TRANSPARENT_COLOR = 'rgba(0, 0, 0, 0.0)';

    
    const processConnection = new signalR.HubConnectionBuilder()
        .withUrl("/processHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function startConnection() {
        try {
            await processConnection.start();
            console.log("SignalR Connected");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    }
    

    let xValues = [];
    let yValues = [];

    const randomColors = [
        "#cce6ff",
        "#99ccff",
        "#1a8cff",
        "#003366",
        "#004d99",
        "#e6f2ff"
    ];

    
    processConnection.on("UpdateProcesses", (processList) => {
        console.log("Processes Updated: ", processList);

        xValues = [];
        yValues = [];

        function cpuCompare(a, b) {
            return Number(b.cpu) - Number(a.cpu);
        }



        let topSixProcesses = processList.sort(cpuCompare);
        topSixProcesses = topSixProcesses.slice(0, 6);
        console.log(topSixProcesses);


        for (let i = 0; i < topSixProcesses.length; i += 1) {
            if (xValues[i] === topSixProcesses[i].processName) { 
                let processName = xValues[i];
                let cpuName = yValues[i];

                xValues = xValues.filter(item => item !== processName);
                yValues = yValues.filter(item => item !== cpuName);
            }
            
            xValues.push(topSixProcesses[i].processName);
            yValues.push(topSixProcesses[i].cpu);
        }

        const barColors = [];
        const borderColors = [];

        const ctx = document.getElementById('processBarChart').getContext('2d');

        for (let i = 0; i < xValues.slice(0, 6).length; i += 1) {
            const randomColor = randomColors[i];

            const gradient = ctx.createLinearGradient(0, 0, 0, 500);
            gradient.addColorStop(0, randomColor);
            gradient.addColorStop(1, TRANSPARENT_COLOR);

            barColors.push(gradient);
            borderColors.push(gradient);
        }


        const barChart = new Chart("processBarChart", {
            type: 'bar',
            data: {
                labels: xValues.slice(0, 6),
                datasets: [{
                    backgroundColor: borderColors,
                    borderColor: 'white',
                    data: yValues.slice(0, 6)
                }]
            },
            options: {
                legend: {
                    display: false,
                    labels: {
                        fontColor: 'white'
                    }
                }
            }
        });

        new Chart("runningProcessChart", {
            type: "doughnut",
            data: {
                labels: xValues.slice(0, 6),
                datasets: [{
                    backgroundColor: barColors,
                    borderColor: borderColors,
                    data: yValues
                }]
            },
            options: {
                legend: {
                    display: true,
                    labels: {
                        fontColor: 'white'
                    }
                }
            }
        });
    });
    
    startConnection();



</script>